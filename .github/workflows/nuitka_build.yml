
name: Build Executable for Windows/MacOS/Linux(ubuntu)

# Controls when the workflow will run
on:
  # build every monday at 00:15 UTC
  schedule:
    - cron:  '20 11 * * 1'
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main", "master" ]
  # pull_request:
  #   branches: [ "main", "master" ]

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

jobs:

  build:

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        # optional os: windows-2022, windows-2019, macos-12, macos-11, ubuntu-22.04, ubuntu-20.04
      
    runs-on: ${{ matrix.os }}
    env:
      EXE_NAME: "product"
      # EXE_NAME: $(basename $GITHUB_REPOSITORY)
    steps:
    
      # Check-out repository
      - uses: actions/checkout@v3
      
      # Setup Python
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt

      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start Build for Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          python -m nuitka main.py --standalone --assume-yes-for-downloads --output-dir=build --output-file=${{ env.EXE_NAME }} --enable-plugin=pyside6 --disable-console
          cd build && ren main.dist ${{ env.EXE_NAME }}
          
      - name: Start Build for Linux(ubuntu)
        if: ${{ runner.os == 'Linux' }}
        run: |
          python -m nuitka main.py --standalone --assume-yes-for-downloads --output-dir=build --output-file=${{ env.EXE_NAME }} --enable-plugin=pyside6 --disable-console
          cd build && mv main.dist ${{ env.EXE_NAME }}
          
      - name: Start Build for Mac
        if: ${{ runner.os == 'macOS' }}
        run: |
          python -m nuitka main.py --standalone --assume-yes-for-downloads --output-dir=build --output-file=${{ env.EXE_NAME }} --enable-plugin=pyside6 --disable-console --macos-create-app-bundle
          cd build && mv main.app ${{ env.EXE_NAME }}.app
        
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.EXE_NAME }}_for_${{ runner.os }}
          path: |
            build/${{ env.EXE_NAME }}/*
            build/${{ env.EXE_NAME }}.app
            
